@file:Suppress("UNUSED_PARAMETER")

package lesson1

import java.io.File

/**
 * Сортировка времён
 *
 * Простая
 * (Модифицированная задача с сайта acmp.ru)
 *
 * Во входном файле с именем inputName содержатся моменты времени в формате ЧЧ:ММ:СС AM/PM,
 * каждый на отдельной строке. См. статью википедии "12-часовой формат времени".
 *
 * Пример:
 *
 * 01:15:19 PM
 * 07:26:57 AM
 * 10:00:03 AM
 * 07:56:14 PM
 * 01:15:19 PM
 * 12:40:31 AM
 *
 * Отсортировать моменты времени по возрастанию и вывести их в выходной файл с именем outputName,
 * сохраняя формат ЧЧ:ММ:СС AM/PM. Одинаковые моменты времени выводить друг за другом. Пример:
 *
 * 12:40:31 AM
 * 07:26:57 AM
 * 10:00:03 AM
 * 01:15:19 PM
 * 01:15:19 PM
 * 07:56:14 PM
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */
fun sortTimes(inputName: String, outputName: String) {
    TODO()
}

/**
 * Сортировка адресов
 *
 * Средняя
 *
 * Во входном файле с именем inputName содержатся фамилии и имена жителей города с указанием улицы и номера дома,
 * где они прописаны. Пример:
 *
 * Петров Иван - Железнодорожная 3
 * Сидоров Петр - Садовая 5
 * Иванов Алексей - Железнодорожная 7
 * Сидорова Мария - Садовая 5
 * Иванов Михаил - Железнодорожная 7
 *
 * Людей в городе может быть до миллиона.
 *
 * Вывести записи в выходной файл outputName,
 * упорядоченными по названию улицы (по алфавиту) и номеру дома (по возрастанию).
 * Людей, живущих в одном доме, выводить через запятую по алфавиту (вначале по фамилии, потом по имени). Пример:
 *
 * Железнодорожная 3 - Петров Иван
 * Железнодорожная 7 - Иванов Алексей, Иванов Михаил
 * Садовая 5 - Сидоров Петр, Сидорова Мария
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */

// N - количество строк в исходном файле
// Трудоемкость - O(NlogN)
// Ресурсоемкость - O(N)
fun sortAddresses(inputName: String, outputName: String) {

    val list = File(inputName).readLines()

    val listOfStreets =
        list.map {
            //Проверка на правильность формата каждой входной строки
            if (!it.matches(Regex("""\S+ \S+ - \S+ \d+"""))) throw IllegalArgumentException()
            it.split(Regex(" - | (?=\\d)"))
        }
            // Группируем улицу и номер дома, образуя пару улица,дом to человек
            .groupBy({ it[1] to it[2].toInt() }, { it[0] })
            // сортировка людей по алфавиту (здесь из-за вложенной сортировки сложность становится логарифмической)
            .map { (k, v) -> k to v.sortedBy { v -> v } }
            //Сортировка по алфавиту названия улицы и по увеличению номера дома
            .sortedWith(compareBy({ it.first.first }, { it.first.second }))

    File(outputName).bufferedWriter().use { out ->

        listOfStreets.forEach { v ->
            run {
                val s = String.format("%s %s - %s", v.first.first, v.first.second, v.second.joinToString())
                out.write(s)
                out.newLine()
            }
        }
    }
}

/**
 * Сортировка температур
 *
 * Средняя
 * (Модифицированная задача с сайта acmp.ru)
 *
 * Во входном файле заданы температуры различных участков абстрактной планеты с точностью до десятых градуса.
 * Температуры могут изменяться в диапазоне от -273.0 до +500.0.
 * Например:
 *
 * 24.7
 * -12.6
 * 121.3
 * -98.4
 * 99.5
 * -12.6
 * 11.0
 *
 * Количество строк в файле может достигать ста миллионов.
 * Вывести строки в выходной файл, отсортировав их по возрастанию температуры.
 * Повторяющиеся строки сохранить. Например:
 *
 * -98.4
 * -12.6
 * -12.6
 * 11.0
 * 24.7
 * 99.5
 * 121.3
 */

// N - количество строк с температурами в исходном файле
// Трудоемкость - O(N)
// Ресурсоемкость - O(N)
fun sortTemperatures(inputName: String, outputName: String) {
    val list = File(inputName).readLines().map { (it.replace(".", "").toInt() + 2730) }.toIntArray()
    val result = countingSort(list, 7730).map { (it - 2730).toFloat() / 10 }
        .joinToString("\n")
    File(outputName).writeText(result)
}

/**
 * Сортировка последовательности
 *
 * Средняя
 * (Задача взята с сайта acmp.ru)
 *
 * В файле задана последовательность из n целых положительных чисел, каждое в своей строке, например:
 *
 * 1
 * 2
 * 3
 * 2
 * 3
 * 1
 * 2
 *
 * Необходимо найти число, которое встречается в этой последовательности наибольшее количество раз,
 * а если таких чисел несколько, то найти минимальное из них,
 * и после этого переместить все такие числа в конец заданной последовательности.
 * Порядок расположения остальных чисел должен остаться без изменения.
 *
 * 1
 * 3
 * 3
 * 1
 * 2
 * 2
 * 2
 */

// N - количество строк с числами в исходном файле
// Трудоемкость - O(N)
// Ресурсоемкость - O(N)
fun sortSequence(inputName: String, outputName: String) {
    var max = 0
    var number = 0
    val list = File(inputName).readLines()

    //Проверка, пуст ли входной файл
    if (list.isEmpty())
        File(outputName).writeText(inputName)

    list.groupBy { i -> i }.forEach { (key, value) ->
        if (value.size >= max)
            if (value.size > max) {
                max = value.size
                number = key.toInt()
            } else if (key.toInt() < number) {
                max = value.size
                number = key.toInt()
            }
    }

    val result = list.filter { it != "$number" } + List(max) { "$number" }
    File(outputName).writeText(result.joinToString("\n"))
}

/**
 * Соединить два отсортированных массива в один
 *
 * Простая
 *
 * Задан отсортированный массив first и второй массив second,
 * первые first.size ячеек которого содержат null, а остальные ячейки также отсортированы.
 * Соединить оба массива в массиве second так, чтобы он оказался отсортирован. Пример:
 *
 * first = [4 9 15 20 28]
 * second = [null null null null null 1 3 9 13 18 23]
 *
 * Результат: second = [1 3 4 9 9 13 15 20 23 28]
 */
fun <T : Comparable<T>> mergeArrays(first: Array<T>, second: Array<T?>) {
    TODO()
}

