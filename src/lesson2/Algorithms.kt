@file:Suppress("UNUSED_PARAMETER")

package lesson2

/**
 * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
 * Простая
 *
 * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
 * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
 *
 * 201
 * 196
 * 190
 * 198
 * 187
 * 194
 * 193
 * 185
 *
 * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
 * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
 * Вернуть пару из двух моментов.
 * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
 * Например, для приведённого выше файла результат должен быть Pair(3, 4)
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */
fun optimizeBuyAndSell(inputName: String): Pair<Int, Int> {
    TODO()
}

/**
 * Задача Иосифа Флафия.
 * Простая
 *
 * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
 *
 * 1 2 3
 * 8   4
 * 7 6 5
 *
 * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
 * Человек, на котором остановился счёт, выбывает.
 *
 * 1 2 3
 * 8   4
 * 7 6 х
 *
 * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
 * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
 *
 * 1 х 3
 * 8   4
 * 7 6 Х
 *
 * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
 *
 * 1 Х 3
 * х   4
 * 7 6 Х
 *
 * 1 Х 3
 * Х   4
 * х 6 Х
 *
 * х Х 3
 * Х   4
 * Х 6 Х
 *
 * Х Х 3
 * Х   х
 * Х 6 Х
 *
 * Х Х 3
 * Х   Х
 * Х х Х
 *
 * Общий комментарий: решение из Википедии для этой задачи принимается,
 * но приветствуется попытка решить её самостоятельно.
 */
fun josephTask(menNumber: Int, choiceInterval: Int): Int {
    TODO()
}

/**
 * Наибольшая общая подстрока.
 * Средняя
 *
 * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
 * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
 * Если общих подстрок нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 * Если имеется несколько самых длинных общих подстрок одной длины,
 * вернуть ту из них, которая встречается раньше в строке first.
 */

//Пусть N - длина наибольшей строки (first или second)
// Трудоемкость - O(N * N)
// Ресурсоемкость - O(N * N) - наихудший случай(когда длина обеих строк = N)
// Ресурсоемкость - O(N) - наилучший случай(когда длина одной из строк = 1, а другой = N)
fun longestCommonSubstring(first: String, second: String): String {

    if (first == "" || second == "")
        return ""

    var lastPos = 0
    var maxLength = 0
    var result = ""

    // создание двумерного массива -> Ресурсоемкость - O(N * N)
    val matrix = Array(first.length) { IntArray(second.length) }

    // Так как в данном алгоритме используется двумерный массив ->
    // Трудоемкость - O(N * N) - в наихудшем случае, когда обе строки имеют длину N
    for (i in first.indices) {
        for (j in second.indices) {

            if (first[i] == second[j]) {

                //заполнение диагоналей матрицы с запоминанием наибольшего числа и его позиции(позиции последнего символа в first)
                if (i != 0 && j != 0 && matrix[i - 1][j - 1] != 0) {
                    matrix[i][j] = matrix[i - 1][j - 1] + 1

                    if (matrix[i][j] > maxLength) {
                        maxLength = matrix[i][j]
                        lastPos = i
                    }
                } else {
                    matrix[i][j] = 1

                    //данная проверка нужна для того, чтобы выявить самую первую подстроку с длиной 1
                    //Из условия задачи:
                    // Если имеется несколько самых длинных общих подстрок одной длины,
                    // вернуть ту из них, которая встречается раньше в строке first.
                    if (result.isEmpty()) {
                        result = first[i].toString()
                    }
                }
            }
        }
    }

    // поиск нужной подстроки путем отбрасывания и взятия последних элементов этой строки:
    // мы знаем lastPos - позицию последнего символа в самой длинной подстроке
    // а также мы знаем MaxLength - длину нашей наибольшей подстроки
    return if (maxLength < 2)
        result
    else {
        first.dropLast(first.length - lastPos - 1).takeLast(maxLength)
    }
}

/**
 * Число простых чисел в интервале
 * Простая
 *
 * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
 * Если limit <= 1, вернуть результат 0.
 *
 * Справка: простым считается число, которое делится нацело только на 1 и на себя.
 * Единица простым числом не считается.
 */

//Данная задача решается при помощи алгоритма: Решето Эратосфена
// Ссылка на сайт с описанием алгоритма: https://bit.ly/366vVZj
//Пусть N = значению limit
// Трудоемкость - O(sqrt(N) * log(logN))
// Ресурсоемкость - O(N)
fun calcPrimesNumber(limit: Int): Int {

    if (limit <= 1)
        return 0

    val list = BooleanArray(limit + 1) { true }
    var x = 2

    // O(sqrt(N))
    while (x * x <= limit) {

        //необходимая проверка, чтобы не пробегаться уже по отброшенным элементам
        if (list[x]) {
            //При первом проходе все четные элементы будут "удалены" (N/2 вхождений в цикл), потом будет N/3 вхождений -> Трудоемкость - log(logN)
            for (i in x * x..limit step x) {
                list[i] = false
            }
        }
        x++
    }

    //Подсчет числа элементов со значение true и отбрасываем первые два элемента,
    // тк в данном массиве мы учтем позиции, на которых стоят числа 0 и 1, которые не являются простыми
    // O(N)
    return list.drop(2).count { it }
}
